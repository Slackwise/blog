/* vim: fdm=marker smarttab expandtab ts=2 sw=2 */


/*** SLACKWISE.CSS v1.0.0
 
The purpose of this file is to provide general styles for articles or
documents I write. This is not specific to web pages or blog posts,
but may be usable for printed documents as a form of personal
letterhead, or even as HTML email styling for branding purposes.

You will find blog and structure related styling in other CSS files.
 ************************/

 /*  Extracting the font information, now I can reuse this file elsewhere, and so can anyone! */
 @import url("roboto-fonts/roboto-fonts.css");

* {
  /* ONLY GLOBAL RULES THAT DON'T INHERIT */
  box-sizing: border-box; /* https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing#content:~:text=It%20is%20often%20useful%20to%20set,on%20while%20laying%20out%20your%20content. */
}

:root {

  /* TYPOGRAPHY */
  --general-font: 'Roboto',             'Roboto',       'Verdana',      sans-serif;
  --body-font:    'Roboto Slack',       'Roboto',       'Verdana',      sans-serif;
  --code-font:    'Roboto Mono',        'Consolas',     'Inconsolata',  monospace;
  --title-font:   'Roboto Condensed',   'Arial Narrow', 'Tahoma',       sans-serif;
  --quote-font:   'Roboto Serif',       'Georgia',                      serif;


  --title-font-size: 150%;
  --subtitle-font-size: 90%;
  font-size: 110%; /* Accessibility friendly relative size for browser override, and larger in general for readability */
  font-family: var(--general-font);
  font-kerning: auto;
  font-variant-ligatures: common-ligatures;


  /*  COLOR NAMES
      These are just named colors, with no semantics as to where they can or should be used.
      This list can just keep growing, and being tweaked over time.*/
  --zelda-green: #00CC00;
  --green: #47B747;
  --blue: #4781b8;
  --purple: #5847b8;
  --almost-white: #f8f8f8;
  --almost-white-grey: #EEE;
  --light-grey: #DDD;
  --dark-grey: #444;
  --lighter-dark-grey: #777;
  --almost-black: #1E1E1E;

  /*  SEMANTIC COLORS
      From the above color names, we can now pick and choose them to actually color our elments.
      This separation allows us to tweak colors and usage independently, which is useful for
      evolving a design and creating variants like dark modes. */
  --body-copy-color: var(--dark-grey);
  --aside-copy-color: color-mix(in srgb, var(--body-copy-color), white 30%); /* lighten by mixing in white */
  --subtitle-color: var(--lighter-dark-grey);
  --background-color: var(--almost-white-grey);
  --link-color: var(--blue);
  --link-color-visited: var(--purple);
  --emphasis-color: var(--green);

  color: var(--body-copy-color);
  background-color: var(--background-color);

  /* SIZING & SPACING */
  --box-shadow: 0 0 5px 1px rgba(0,0,0,.5);
  --box-border: 1px solid var(--light-grey);
  --border-radius: 5px;
  --us-letter-width: 8.5in;
  --us-letter-margin: 1in;
  --content-max-width: calc(var(--us-letter-width) - var(--us-letter-margin) * 2);
  --content-padding: calc(var(--us-letter-margin) / 5); 
}

/*  Let's keep the width readable, and as a bonus: printable.
    The goal of this layout is to match a (US) letter in size and style,
    as this stylesheet will be used for my own documents as well.  */
article {
  max-width: var(--content-max-width);
  margin: var(--us-letter-margin);
}

/*  If we are composing outside an article, we still want any body copy
    to fit within a letter.  */
p {
  max-width: var(--content-max-width);
  font-family: var(--body-font);
  text-align: justify;
}

aside {
  font-size: 80%;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: var(--title-font);
  font-size: 120%;
}

/* TITLE */
h1 {
  font-size: var(--title-font-size);
}

header {
  /* Let's keep the title and subtitle close together */
  > hgroup * {
    margin: 0; 
  }
  /* SUBTITLE */
  > hgroup p {
    font-size: var(--subtitle-font-size);
    font-family: var(--title-font);
    font-weight: bold;
    color: var(--subtitle-color);
  }
}


a {
  font-family: inherit;
  text-decoration: none;
  color: var(--link-color);

  &:hover {
    text-decoration: underline;
  }

  &:visited {
    color: var(--link-color-visited);
  }
}


details {
  font-family: var(--title-font);
  border-radius: var(--border-radius);
  border: var(--box-border);
  box-shadow: var(--box-shadow);

  > summary {
    font-family: var(--body-font);
  }
}

/*  I wanted to style quotes without adding HTML,
    and the goal was to have an email-style left margin bar,
    and then I wanted it to be a little more obvious it was
    a quote, so I added the literal quote. */
blockquote {
  text-align: justify;
  font-family: var(--quote-font);
  font-size: 90%;
  font-style: italic;
  /* First we create the email quote styled bar using a border: */
  border-left: 20px solid var(--light-grey);
  /* And we give it some breathing room: */
  padding-left: 10px;
  /* And the quote should stand off from the rest of the article body: */
  margin: var(--content-padding);

  &::before {
    /* Let's create a "virtual" character: */
    content: open-quote;
    font-size: 60px;
    font-style: normal;
    /* We need it to render outside the quote itself: */
    position: relative;
    display: block;
    /* And let's position it: */
    float: left;
    left: -32px; /* a total of the border and padding plus 2 pixels for the font's size/shape */
    top: 30px;
    /* And we need it to not shift around any text near it: */
    margin: 0;
    padding: 0;
    /* This specifically makes it almost intangible: */
    line-height: 0; 
  }
}

pre {
  padding: var(--content-padding);
  background: var(--almost-black);
  color: var(--almost-white);
  border: var(--box-border);
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
}

pre,
pre *,
var,
code,
code *,
:not(pre) > code {
  font-family: var(--code-font);
  font-size: 80%;
  font-style: normal;
}

pre > code,
pre[class*="language-"],
pre[class*="language-"] *,
pre > code[class*="language-"],
pre > code[class*="language-"] * {
}

/*  The article's footer is mostly for metadata,
    so I'm designing it as a proper list of key/value pairs. */
footer {
  color: var(--aside-copy-color);
  font-family: var(--title-font);
  font-size: 60%;
  /*  I don't think anyone cares to remember if they visited these,
      so they'll end up always purple, which will just look bad. */
  & a:visited { 
    color: var(--link-color);
  }

  & h2 {
    display: none;
  }

  & dl {
    /* width: 100%; */
    display: grid;
    grid-template-areas:  "author     publishdate"
                          "license    updatedate"
                          "comments   versionhistory"
                          "comments   .";
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 1fr 1fr 1fr 1fr;
    column-gap: 10px;
  }

  & dl > * {
    margin: 0;
  }

  & dl dt {
    display: none;
    /* background-color: var(--almost-white-grey); */
    /* float: left;
    clear: left; */
    /* padding-right: var(--content-padding); */
  }

  & dd[itemprop="author"] {
    grid-area: author;
  }
  & dd[itemprop="author"]::before {
    content: "by ";
  }
  & dd:has(a[itemprop="license"]) {
    grid-area: license;
  }
  & a[itemprop="license"] {
    color: var(--body-copy-color); /* We really don't neeeed the link to draw attention, but might as well leave it for the curious... */
  }
  & dd:has(a[itemprop="discussionUrl"]) {
    grid-area: comments;
    font-size: 150%;
    font-weight: bold;
  }
  & dd:has(time[itemprop="datePublished"]) {
    grid-area: publishdate;
    text-align: right;
  }
  & dd:has(time[itemprop="datePublished"])::before {
    content: "Published: ";
  }
  & dd:has(time[itemprop="dateModified"]) {
    grid-area: updatedate;
    text-align: right;
  }
  & dd:has(time[itemprop="dateModified"])::before {
    content: "Last Updated: ";
  }
  & dd:has(a[itemprop="archivedAt"]) {
    grid-area: versionhistory;
    text-align: right;
  }
}

img.avatar {
  object-fit: cover;
  object-position: top center;
  border-radius: 50%;
}


@media (max-width: 8.5in) { /* US letter width */
  article {
    margin: var(--content-padding);
  }
}

@media print {
  @page {
    size: letter;
    margin: var(--us-letter-margin);
  }

  :root {
    /*  Print font rendering is better than web, and doesn't suffer
        so let's normalize the font by removing the potential DPI tweak below. */
    font-weight: normal;
    /* font-variation-settings: "GRAD" 0; */
  }

  /* Only want to print the articles themselves, so hide the rest: */
  body > :not(main) {
    display: none;
  }

  /* And let's make sure they have some real margins: */
  article {
    margin: 0; /* Relying on @page margin instead */
  }
}

/*  Old ass displays render fonts poorly, so there are two ways to improve readabilty:
    - With a variable font, you can bump the weight or grade a bit.
    - With a fixed font, you can add a `stroke-width` of `0.2em`.
    Using a `@media` rule, we can target lower resolution displays,
    where `96di` matches common desktop displays of 1080p and below.  */
@media (max-resolution: 96dpi) {
  p {
    /*  I found that tweaking the grade had negative results at lower DPI,
        like letterform subpixel hints causing some things to look weirdly thin. */
    /* font-variation-settings: "GRAD" 20; */
    /* font-weight: 450; */
    /* stroke-width: 0.2em; */
    /* This improves the legibility of fonts on Windows, at least when light-on-dark */
  }
}